using AhlanFeekum.Shared;
using AhlanFeekum.SiteProperties;
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using AhlanFeekum.Permissions;
using AhlanFeekum.PropertyCalendars;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using AhlanFeekum.Shared;
using AhlanFeekum.MobileResponses;

namespace AhlanFeekum.PropertyCalendars
{
    public class PropertyCalendarsAppService : PropertyCalendarsAppServiceBase, IPropertyCalendarsAppService
    {
        //<suite-custom-code-autogenerated>
        public PropertyCalendarsAppService(IPropertyCalendarRepository propertyCalendarRepository, PropertyCalendarManager propertyCalendarManager, IDistributedCache<PropertyCalendarDownloadTokenCacheItem, string> downloadTokenCache, IRepository<AhlanFeekum.SiteProperties.SiteProperty, Guid> sitePropertyRepository)
            : base(propertyCalendarRepository, propertyCalendarManager, downloadTokenCache, sitePropertyRepository)
        {
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...

        [Authorize(AhlanFeekumPermissions.PropertyCalendars.Create)]
        public virtual async Task<MobileResponseDto> CreateManyAsync(List<PropertyCalendarItemDto> input)
        {
            MobileResponseDto mobileResponseDto = new MobileResponseDto();
            mobileResponseDto.Code = 200;
            mobileResponseDto.Message = "SUCCESS";
            GetPropertyCalendarsInput getPropertyCalendarsInput = new GetPropertyCalendarsInput();
           
            if (  !input.IsNullOrEmpty())
            {
                getPropertyCalendarsInput.SitePropertyId = input[0].PropertyId;
                await DeleteAllAsync(getPropertyCalendarsInput);
                foreach (var item in input)
                {
                    await _propertyCalendarManager.CreateAsync(
                              item.PropertyId , item.Date, item.IsAvailable, item.Price, item.Note
                              );
                }
            }
            mobileResponseDto.Data = true;
            return mobileResponseDto;
        }
    }
}