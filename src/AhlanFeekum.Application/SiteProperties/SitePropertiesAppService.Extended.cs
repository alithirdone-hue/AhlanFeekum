using AhlanFeekum.FavoriteProperties;
using AhlanFeekum.Governorates;
using AhlanFeekum.MobileResponses;
using AhlanFeekum.Permissions;
using AhlanFeekum.PropertyFeatures;
using AhlanFeekum.PropertyTypes;
using AhlanFeekum.Shared;
using AhlanFeekum.Shared;
using AhlanFeekum.SiteProperties;
using AhlanFeekum.SiteProperties;
using AhlanFeekum.UserProfiles;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Caching.Distributed;
using MiniExcelLibs;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Volo.Abp.Content;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Users;

namespace AhlanFeekum.SiteProperties
{
    public class SitePropertiesAppService : SitePropertiesAppServiceBase, ISitePropertiesAppService
    {
        //<suite-custom-code-autogenerated>
        public ICurrentUser _currentUser { get; set; }
        public IFavoritePropertyRepository _favoritePropertyRepository { get; set; }
        public FavoritePropertyManager _favoritePropertyManager { get; set; }
        public SitePropertiesAppService(ISitePropertyRepository sitePropertyRepository, SitePropertyManager sitePropertyManager, IDistributedCache<SitePropertyDownloadTokenCacheItem, string> downloadTokenCache, IRepository<AhlanFeekum.PropertyTypes.PropertyType, Guid> propertyTypeRepository, IRepository<AhlanFeekum.Governorates.Governorate, Guid> governorateRepository, IRepository<AhlanFeekum.PropertyFeatures.PropertyFeature, Guid> propertyFeatureRepository,
             ICurrentUser currentUser, IFavoritePropertyRepository favoritePropertyRepository, FavoritePropertyManager favoritePropertyManager)
            : base(sitePropertyRepository, sitePropertyManager, downloadTokenCache, propertyTypeRepository, governorateRepository, propertyFeatureRepository)
        {
            _currentUser = currentUser;
            _favoritePropertyRepository = favoritePropertyRepository;
            _favoritePropertyManager = favoritePropertyManager;
        }


        public virtual async Task<SitePropertyMobileDto> GetSitePropertyWithDetailsAsync(Guid id)
        {
            Guid? userId = null;
            if (_currentUser == null)
                userId = null;
            else
                userId = _currentUser.Id;
            return ObjectMapper.Map<SitePropertyWithDetails, SitePropertyMobileDto>(await _sitePropertyRepository.GetSitePropertyWithDetailsAsync(id, userId));

        }

        [Authorize(AhlanFeekumPermissions.SiteProperties.Edit)]
        public virtual async Task<SitePropertyDto> UpdateAsync(SitePropertyUpdateStepTwoDto input)
        {
            var siteProp = await GetAsync(input.Id);
            if(siteProp == null)
                throw new UserFriendlyException("Property Not Found");
            var siteProperty = await _sitePropertyManager.UpdateAsync(
            input.Id, input.Address, input.StreetAndBuildingNumber, input.LandMark
            );

            return ObjectMapper.Map<SiteProperty, SitePropertyDto>(siteProperty);
        }
        //</suite-custom-code-autogenerated>
        public virtual async Task<MobileResponseDto> SetPricePerNightAsync(SitePropertySetPriceDto input)
        {
            MobileResponseDto mobileResponseDto = new MobileResponseDto();
            mobileResponseDto.Code = 200;
            mobileResponseDto.Message = "SUCCESS";
            SiteProperty siteProperty = await _sitePropertyRepository.FirstOrDefaultAsync(s => s.Id == input.PropertyId);
            if (siteProperty == null)
                throw new UserFriendlyException(L["ProperrtyNotFound"]);
            siteProperty.PricePerNight = input.PricePerNight;
            await _sitePropertyRepository.UpdateAsync(siteProperty);
            mobileResponseDto.Data = true;
            return mobileResponseDto;
        }
        public virtual async Task<PagedResultDto<SitePropertyMobileDto>> GetListMobileAsync(GetSitePropertiesMobileInput input)
        {
            Guid? userId = null;
            if (_currentUser == null)
                userId = null;
            else
                userId = _currentUser.Id;

            var item = await _sitePropertyRepository.GetListWithDetailsAsync(input.FilterText, input.PropertyTitle, input.HotelName, input.BedroomsMin, input.BedroomsMax, input.BathroomsMin, input.BathroomsMax, input.NumberOfBedMin, input.NumberOfBedMax, input.FloorMin, input.FloorMax, input.MaximumNumberOfGuestMin, input.MaximumNumberOfGuestMax, input.LivingroomsMin, input.LivingroomsMax, input.PropertyDescription, input.HourseRules, input.ImportantInformation, input.Address, input.StreetAndBuildingNumber, input.LandMark, input.PricePerNightMin, input.PricePerNightMax, input.IsActive, input.PropertyTypeId, input.GovernorateId, input.PropertyFeatureIds, input.CheckInDate, input.CheckOutDate, userId, input.Sorting, input.MaxResultCount, input.SkipCount);

            return new PagedResultDto<SitePropertyMobileDto>
            {
                TotalCount = item.TotalCount,
                Items = ObjectMapper.Map<List<SitePropertyWithDetails>, List<SitePropertyMobileDto>>(item.SitePropertyWithDetails)
            };

        }

        [Authorize(AhlanFeekumPermissions.FavoriteProperties.Create)]
        public virtual async Task<MobileResponseDto> AddToFavoriteAsync(Guid id)
        {
            MobileResponseDto mobileResponseDto = new MobileResponseDto();
            mobileResponseDto.Code = 200;
            mobileResponseDto.Message = "SUCCESS";
            var currentUserId = _currentUser.Id;
            if (currentUserId == null)
            {
                throw new UserFriendlyException("Current user not exist");
            }
            var siteProperty = await _sitePropertyRepository.FirstOrDefaultAsync(x => x.Id == id);
            if (siteProperty == null)
                throw new UserFriendlyException("Property not exist");
            var favoriteProperty = await _favoritePropertyRepository.FirstOrDefaultAsync(x => x.UserProfileId == currentUserId && x.SitePropertyId == id);
            if (favoriteProperty != null)
            {
                mobileResponseDto.Message = "You already added this property";
                mobileResponseDto.Data = false;
                return mobileResponseDto;
            }

            await _favoritePropertyManager.CreateAsync(currentUserId.Value, id);
            mobileResponseDto.Data = true;
            return mobileResponseDto;
            //var result = await _storyLoversAppService.GetListAsync(input);
            //return (int)result.TotalCount;
        }

        [Authorize(AhlanFeekumPermissions.FavoriteProperties.Delete)]
        public virtual async Task<MobileResponseDto> RemoveFromFavoriteAsync(Guid id)
        {
            MobileResponseDto mobileResponseDto = new MobileResponseDto();
            mobileResponseDto.Code = 200;
            mobileResponseDto.Message = "SUCCESS";
            var currentUserId = _currentUser.Id;
            if (currentUserId == null)
            {
                throw new UserFriendlyException("Current user not exist");
            }
            var siteProperty = await _sitePropertyRepository.FirstOrDefaultAsync(x => x.Id == id);
            if (siteProperty == null)
                throw new UserFriendlyException("Property not exist");
            var favoriteProperty = await _favoritePropertyRepository.FirstOrDefaultAsync(x => x.UserProfileId == currentUserId && x.SitePropertyId == id);
            if (favoriteProperty == null)
            {
                mobileResponseDto.Message = "You dont have property in your favorite";
                mobileResponseDto.Data = false;
                return mobileResponseDto;
            }

            await _favoritePropertyRepository.DeleteAsync(favoriteProperty);
            mobileResponseDto.Data = true;
            return mobileResponseDto;
            //var result = await _storyLoversAppService.GetListAsync(input);
            //return (int)result.TotalCount;
        }
        //Write your custom code...
    }
}