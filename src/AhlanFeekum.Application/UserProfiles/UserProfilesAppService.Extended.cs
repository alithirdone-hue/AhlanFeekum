using AhlanFeekum.Authorizations;
using AhlanFeekum.MobileResponses;
using AhlanFeekum.Permissions;
using AhlanFeekum.Shared;
using AhlanFeekum.Shared;
using AhlanFeekum.SiteProperties;
using AhlanFeekum.UserProfiles;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Caching.Distributed;
using Microsoft.Extensions.Configuration;
using MiniExcelLibs;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Net;
using System.Net.Http;
using System.Net.Mail;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Volo.Abp.Content;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Emailing;
using Volo.Abp.Identity;
using Volo.Abp.Users;
using static Volo.Abp.Identity.Settings.IdentitySettingNames;

namespace AhlanFeekum.UserProfiles
{
    public class UserProfilesAppService : UserProfilesAppServiceBase, IUserProfilesAppService
    {
        //<suite-custom-code-autogenerated>
        public UserManager _userManager { get; set; }
        protected Microsoft.Extensions.Configuration.IConfiguration _configuration;
        protected HttpClient _httpClient;
        protected IEmailSender _emailSender;
        public ICurrentUser _currentUser { get; set; }
        public UserProfilesAppService(IUserProfileRepository userProfileRepository, UserProfileManager userProfileManager, IDistributedCache<UserProfileDownloadTokenCacheItem, string> downloadTokenCache, IRepository<Volo.Abp.Identity.IdentityRole, Guid> identityRoleRepository, IRepository<Volo.Abp.Identity.IdentityUser, Guid> identityUserRepository, UserManager userManager,
            Microsoft.Extensions.Configuration.IConfiguration configuration, HttpClient httpClient, IEmailSender emailSender, ICurrentUser currentUser)
            : base(userProfileRepository, userProfileManager, downloadTokenCache, identityRoleRepository, identityUserRepository)
        {
            _userManager = userManager;
            _configuration = configuration;
            _httpClient = httpClient;
            _emailSender = emailSender;
            _currentUser = currentUser;
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        [AllowAnonymous]
        public virtual async Task<MobileResponseDto> RegisterAsync(RegisterCreateMobileDto input)
        {
            var user = await _userProfileManager.CreatWithDetialsAsync(input.Name, input.IsSuperHost, input.Password, input.ProfilePhoto, input.RoleId, input.Email, input.PhoneNumber, input.Latitude, input.Longitude, input.Address);
            return ObjectMapper.Map<MobileResponse, MobileResponseDto>(user);
        }

        [AllowAnonymous]
        public virtual async Task<MobileResponseDto> UpdateMyProfileAsync(UserProfileUpdateMobileDto input)
        {
            if(_currentUser == null)
                throw new UserFriendlyException("User not login");
            var user = await _userProfileManager.UpdateMyProfileAsync(_currentUser.Id.Value, input.Name, input.ProfilePhoto, input.IsProfilePhotoChanged, input.Email, input.PhoneNumber, input.Latitude, input.Longitude, input.Address);
            return ObjectMapper.Map<MobileResponse, MobileResponseDto>(user);
        }
        [AllowAnonymous]
        public virtual async Task<MobileResponseDto> RequestPasswordResetAsync(PasswordResetRequestDto input)
        {
            GetUserProfilesInput getUserProfilesInput = new GetUserProfilesInput();
            int type = 2;
            getUserProfilesInput.Email = input.EmailOrPhone;
            var users = await GetListAsync(getUserProfilesInput);

            MobileResponseDto mobileResponse = new MobileResponseDto();
            if (users.TotalCount == 0)
            {
                getUserProfilesInput = new GetUserProfilesInput();
                getUserProfilesInput.PhoneNumber = input.EmailOrPhone;
                users = await GetListAsync(getUserProfilesInput);
                if (users.TotalCount == 0)
                    throw new UserFriendlyException("User not found with this email address.");
                else
                    type = 1;
            }
            else
                type = 0;
            var firstUser = users.Items.FirstOrDefault();
            var user = firstUser.IdentityUser;

            // Generate a random security code
            Random random = new Random();
            string securityCode = random.Next(1000, 10000).ToString();

            // Store the security code in cache with expiration
            var cacheKey = $"password_reset_{user.Id}";
            await _downloadTokenCache.SetAsync(
                cacheKey,
                new UserProfileDownloadTokenCacheItem { SecurityCode = securityCode },
                new DistributedCacheEntryOptions { AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5) }
            );

            // TODO: Send security code via email or SMS

            //Email Send
            if (type == 0)
            {
                if (input.EmailOrPhone.IsNullOrWhiteSpace())
                {
                    mobileResponse.Code = 400;
                    mobileResponse.Message = "Email is required";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                var smtpSection = _configuration.GetSection("Email:Smtp");
                var emailSection = _configuration.GetSection("Email");
                using (var client = new SmtpClient(smtpSection["Host"], smtpSection["Port"] != null ? int.Parse(smtpSection["Port"]) : 587))
                {
                    client.EnableSsl = true;
                    client.UseDefaultCredentials = false;
                    client.Credentials = new NetworkCredential(smtpSection["UserName"], smtpSection["Password"]);

                    var mailMessage = new MailMessage
                    {
                        From = new MailAddress(emailSection["DefaultFromAddress"], emailSection["DefaultFromDisplayName"]),
                        Subject = "Security Code",
                        Body = $"<h1>{securityCode}</h1>",
                        IsBodyHtml = true
                    };

                    mailMessage.To.Add(input.EmailOrPhone);

                    await client.SendMailAsync(mailMessage);
                    mobileResponse.Code = 200;
                    mobileResponse.Message = "Success";
                    mobileResponse.Data = "Success";
                    return mobileResponse;
                }
            }
            else
            {
                //SMS SEND SECURITY CODE
                return mobileResponse;
            }
        }

        [AllowAnonymous]
        public virtual async Task<MobileResponseDto> ConfirmPasswordResetAsync(PasswordConfirmResetRequestDto input)
        {
            GetUserProfilesInput getUserProfilesInput = new GetUserProfilesInput();
            getUserProfilesInput.Email = input.EmailOrPhone;
            var users = await GetListAsync(getUserProfilesInput);

            MobileResponseDto mobileResponse = new MobileResponseDto();
            if (users.TotalCount == 0)
            {
                getUserProfilesInput = new GetUserProfilesInput();
                getUserProfilesInput.PhoneNumber = input.EmailOrPhone;
                users = await GetListAsync(getUserProfilesInput);
                if (users.TotalCount == 0)
                    throw new UserFriendlyException("User not found with this email address.");
            }
            var firstUser = users.Items.FirstOrDefault();
            var user = firstUser.IdentityUser;

            //var user = await _userManager.FindByEmailAsync(input.EmailOrPhone);
            //if (user == null)
            //{
            //    var user = await _userManager.FindByEmailAsync(input.EmailOrPhone);
            //    throw new UserFriendlyException("User not found with this email address.");
            //}

            // Verify security code from cache
            var cacheKey = $"password_reset_{user.Id}";
            var cacheItem = await _downloadTokenCache.GetAsync(cacheKey);

            if (cacheItem == null || cacheItem.SecurityCode != input.SecurityCode)
            {
                throw new UserFriendlyException("Invalid or expired security code.");
            }

            // Generate reset token and reset password
            //var token = await _userManager.GeneratePasswordResetTokenForEmailAsync(input.Email);
            //await _userManager.ResetPasswordForEmailAsync(input.Email, token, input.NewPassword);


            await _userManager.ResetPasswordWithoutTokenAsync(user.Email, input.NewPassword);

            // Remove the security code from cache
            await _downloadTokenCache.RemoveAsync(cacheKey);

            var response = new MobileResponse
            {
                Code = 200,
                Message = "Password reset successfully",
                Data = null
            };

            return ObjectMapper.Map<MobileResponse, MobileResponseDto>(response);
        }


        //[AllowAnonymous]
        //public virtual async Task<MobileResponseDto> ResetPasswordWithoutTokenAsync(PasswordResetRequestDto input)
        //{
        //    var user = await _userManager.FindByEmailAsync(input.Email);
        //    if (user == null)
        //    {
        //        throw new UserFriendlyException("User not found with this email address.");
        //    }


        //    // Generate reset token and reset password
        //    await _userManager.ResetPasswordWithoutTokenAsync(input.Email, input.NewPassword);

        //    var response = new MobileResponse
        //    {
        //        Code = 200,
        //        Message = "Password reset successfully",
        //        Data = null
        //    };

        //    return ObjectMapper.Map<MobileResponse, MobileResponseDto>(response);
        //}

        [AllowAnonymous]
        public virtual async Task<MobileResponseDto> ChangePasswordAsync(PasswordChangeRequestDto input)
        {
            var user = await _userManager.FindByEmailAsync(input.EmailOrPhone);
            if (user == null)
            {
                throw new UserFriendlyException("User not found with this email address.");
            }

            // Generate reset token and reset password
            await _userManager.ChangePasswordAsync(input.EmailOrPhone, input.OldPassword, input.NewPassword);

            var response = new MobileResponse
            {
                Code = 200,
                Message = "Password reset successfully",
                Data = null
            };

            return ObjectMapper.Map<MobileResponse, MobileResponseDto>(response);
        }


        [AllowAnonymous]
        public async Task<MobileResponseDto> SendSecretKeyEmailAsync(string input)
        {
            MobileResponseDto mobileResponse = new MobileResponseDto();
            try
            {
                if (input.IsNullOrWhiteSpace())
                {
                    mobileResponse.Code = 400;
                    mobileResponse.Message = "Email is required";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }
                Random random = new Random();
                int securityNum = random.Next(1000, 10000);

                var smtpSection = _configuration.GetSection("Email:Smtp");
                var emailSection = _configuration.GetSection("Email");
                using (var client = new SmtpClient(smtpSection["Host"], smtpSection["Port"] != null ? int.Parse(smtpSection["Port"]) : 587))
                {
                    client.EnableSsl = true;
                    client.UseDefaultCredentials = false;
                    client.Credentials = new NetworkCredential(smtpSection["UserName"], smtpSection["Password"]);

                    var mailMessage = new MailMessage
                    {
                        From = new MailAddress(emailSection["DefaultFromAddress"], emailSection["DefaultFromDisplayName"]),
                        Subject = "Security Code",
                        Body = $"<h1>{securityNum.ToString()}</h1>",
                        IsBodyHtml = true
                    };

                    mailMessage.To.Add(input);

                    var cacheKey = $"email_verify_{input}";
                    var cacheItem = await _downloadTokenCache.GetAsync(cacheKey);

                    if (cacheItem != null)
                        await _downloadTokenCache.RemoveAsync(cacheKey);


                    await _downloadTokenCache.SetAsync(
                        cacheKey,
                        new UserProfileDownloadTokenCacheItem { SecurityCode = securityNum.ToString() },
                        new DistributedCacheEntryOptions { AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5) }
                    );

                    await client.SendMailAsync(mailMessage);
                    mobileResponse.Code = 200;
                    mobileResponse.Message = "Success";
                    mobileResponse.Data = "Success";
                    return mobileResponse;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
                mobileResponse.Code = 501;
                mobileResponse.Message = "Failed to send Email message.";
                mobileResponse.Data = null;
                return mobileResponse;
            }


            mobileResponse.Code = 501;
            mobileResponse.Message = "Failed to send Email message.";
            mobileResponse.Data = null;
            return mobileResponse;
        }
        [AllowAnonymous]
        public virtual async Task<MobileResponseDto> VerifyAsync(VerifyRequestDto input)
        {
            MobileResponseDto mobileResponse = new MobileResponseDto()
            {
                Code = 200,
                Data = true,
                Message = "SUCCESS"
            };
            var cacheKey = $"email_verify_{input.EmailOrPhone}";
            var cacheItem = await _downloadTokenCache.GetAsync(cacheKey);

            if (cacheItem == null || cacheItem.SecurityCode != input.SecurityCode)
            {
                throw new UserFriendlyException("Invalid or expired security code.");
            }
            else
            {
                await _downloadTokenCache.RemoveAsync(cacheKey);
                return mobileResponse;
            }

               

        }
        [AllowAnonymous]
        public async Task<MobileResponseDto> SendSecretKeyPhoneAsync(string input)
        {
            MobileResponseDto mobileResponse = new MobileResponseDto();

            if (input.IsNullOrWhiteSpace())
            {
                mobileResponse.Code = 400;
                mobileResponse.Message = "Email is required";
                mobileResponse.Data = null;
                return mobileResponse;
            }
            Random random = new Random();
            int securityNum = random.Next(1000, 10000);

            var smtpSection = _configuration.GetSection("Email:Smtp");
            var emailSection = _configuration.GetSection("Email");
            using (var client = new SmtpClient(smtpSection["Host"], smtpSection["Port"] != null ? int.Parse(smtpSection["Port"]) : 587))
            {
                client.EnableSsl = true;
                client.UseDefaultCredentials = false;
                client.Credentials = new NetworkCredential(smtpSection["UserName"], smtpSection["Password"]);

                var mailMessage = new MailMessage
                {
                    From = new MailAddress(emailSection["DefaultFromAddress"], emailSection["DefaultFromDisplayName"]),
                    Subject = "Security Code",
                    Body = $"<h1>{securityNum.ToString()}</h1>",
                    IsBodyHtml = true
                };

                mailMessage.To.Add(input);

                await client.SendMailAsync(mailMessage);
            }


            //  await _emailSender.SendAsync(input, "Security Code", securityNum.ToString(), false);
            var apiKey = _configuration["CallMeBot:ApiKey"];
            var url = $"https://api.callmebot.com/whatsapp.php?phone={input}&text={Uri.EscapeDataString(securityNum.ToString())}&apikey={apiKey}";

            var response = await _httpClient.GetAsync(url);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Failed to send WhatsApp message.");
                mobileResponse.Code = 501;
                mobileResponse.Message = "Failed to send WhatsApp message.";
                mobileResponse.Data = null;
                return mobileResponse;
            }

            mobileResponse.Code = 200;
            mobileResponse.Message = "Success";
            mobileResponse.Data = securityNum.ToString();
            return mobileResponse;

        }


        [AllowAnonymous]
        public virtual async Task<HomePageDto> GetHomePageAsync()
        {
            Guid? userId = null;
            if (_currentUser == null)
                userId = null;
            else
                userId = _currentUser.Id;
                return ObjectMapper.Map<HomePage, HomePageDto>(await _userProfileRepository.GetHomePageAsync(userId));
        }

        public virtual async Task<UserProfileWithDetailsMobileDto> GetWithDetailsAsync(Guid? id)
        {

            Guid? userId = null;
            if (id == null)
            {
                if (_currentUser == null)
                    throw new UserFriendlyException("No User Selected");
                userId = _currentUser.Id;
            }
            else
                userId = id;

            return ObjectMapper.Map<UserProfileWithDetails, UserProfileWithDetailsMobileDto>(await _userProfileRepository.GetWithDetailsAsync(userId.Value));

        }

    }
}