using AhlanFeekum.MimeTypes;
using AhlanFeekum.MobileResponses;
using AhlanFeekum.Permissions;
using AhlanFeekum.PropertyMedias;
using AhlanFeekum.Shared;
using AhlanFeekum.Shared;
using AhlanFeekum.SiteProperties;
using AhlanFeekum.UserProfiles;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Internal;
using Microsoft.Extensions.Caching.Distributed;
using MiniExcelLibs;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Authorization;
using Volo.Abp.BlobStoring;
using Volo.Abp.Caching;
using Volo.Abp.Content;
using Volo.Abp.Domain.Repositories;
using static AhlanFeekum.Permissions.AhlanFeekumPermissions;

namespace AhlanFeekum.PropertyMedias
{
    public class PropertyMediasAppService : PropertyMediasAppServiceBase, IPropertyMediasAppService
    {
        //<suite-custom-code-autogenerated>
        private readonly IBlobContainer<PropertyMediaContainer> _mediaBlobContainer;
        public PropertyMediasAppService(IPropertyMediaRepository propertyMediaRepository, PropertyMediaManager propertyMediaManager, IDistributedCache<PropertyMediaDownloadTokenCacheItem, string> downloadTokenCache, IRepository<AhlanFeekum.SiteProperties.SiteProperty, Guid> sitePropertyRepository,
            IBlobContainer<PropertyMediaContainer> mediaBlobContainer)
            : base(propertyMediaRepository, propertyMediaManager, downloadTokenCache, sitePropertyRepository)
        {
            _mediaBlobContainer = mediaBlobContainer;
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        [Authorize(AhlanFeekumPermissions.PropertyMedias.Edit)]
        public virtual async Task<bool> UpdateSitePropertyMediasAsync(Guid sitePropertyId, List<PropertyMediaDto> input)
        {
            var mediaToDelete = new List<Guid>();

            var existingMedia = await _propertyMediaRepository.GetListAsync(t => t.SitePropertyId == sitePropertyId);
            if (existingMedia != null && existingMedia.Count > 0)
            {
                var existingMediaIds = existingMedia.Select(t => t.Id);
                mediaToDelete = existingMediaIds.Except(input.Select(r => r.Id)).ToList();
            }

            if (!input.IsNullOrEmpty())
            {
                foreach (var item in input)
                {
                    var media = await _propertyMediaRepository.SingleOrDefaultAsync(t => t.Id == item.Id);

                    if (media == null)
                    {
                        if (!item.Image.IsNullOrEmpty() && !item.FileContent.IsNullOrEmpty())
                            await _mediaBlobContainer.SaveAsync(item.Image, item.FileContent);

                        await _propertyMediaManager.CreateAsync(sitePropertyId: item.SitePropertyId,
                                                      image: item.Image,
                                                     order: item.Order,
                                                     isActive: item.isActive);
                    }
                    else
                    {
                        if (!item.Image.IsNullOrEmpty() && !item.FileContent.IsNullOrEmpty() && item.Image != item.OldFileName)
                        {
                            if (!item.OldFileName.IsNullOrEmpty())
                                await _mediaBlobContainer.DeleteAsync(item.OldFileName);
                            await _mediaBlobContainer.SaveAsync(item.Image, item.FileContent);
                        }
                        else
                        {
                            if (item.Image.IsNullOrEmpty() && !item.OldFileName.IsNullOrEmpty())
                            {
                                await _mediaBlobContainer.DeleteAsync(item.OldFileName);
                            }
                        }
                        await _propertyMediaManager.UpdateAsync(id: item.Id,
                                                      sitePropertyId: item.SitePropertyId,
                                                      image: item.Image,
                                                       order: item.Order,
                                                     isActive: item.isActive,
                                                    concurrencyStamp: item.ConcurrencyStamp);
                    }
                }
            }
            var mediaTemp = new PropertyMedia();
            foreach (var item in mediaToDelete)
            {
                mediaTemp = await _propertyMediaRepository.FirstOrDefaultAsync(m => m.Id == item);
                try
                {
                    if (mediaTemp != null && !mediaTemp.Image.IsNullOrEmpty())
                    {
                        if (await _mediaBlobContainer.ExistsAsync(mediaTemp.Image))
                            await _mediaBlobContainer.DeleteAsync(mediaTemp.Image);
                    }
                }
                catch { }
                await _propertyMediaRepository.DeleteAsync(item, autoSave: true);
            }

            return true;
        }

        public virtual async Task<MobileResponseDto> AddMediaToPropertyAsync(PropertyMediaCreateMobileDto input)
        {
            MobileResponseDto mobileResponseDto = new MobileResponseDto();
            mobileResponseDto.Code = 200;
            mobileResponseDto.Message = "Success";
            if (!input.propertyMediaItemDtos.IsNullOrEmpty())
            {

                foreach (var item in input.propertyMediaItemDtos)
                {
                    using (var stream = new MemoryStream())
                    {
                        item.Image.CopyTo(stream);
                        string imageName = $"{Guid.NewGuid().ToString("N")}{Path.GetExtension(item.Image.FileName)}";
                        var extension = Path.GetExtension(item.Image.FileName);
                        if (!string.IsNullOrWhiteSpace(extension))
                        {
                            imageName += extension;
                        }
                        else
                        {
                            imageName += MimeTypeMap.GetRealExtension(item.Image);
                        }
                        await _mediaBlobContainer.SaveAsync(imageName, stream.GetAllBytes());

                        await _propertyMediaManager.CreateAsync(sitePropertyId: input.SitePropertyId,
                                                      image: imageName,
                                                     order: item.Order,
                                                     isActive: item.isActive);
                    }
                }

                   // mobileResponseDto.Data = await GEtWi
                    return mobileResponseDto;
                }
            mobileResponseDto.Code = 500;
            mobileResponseDto.Message = "Media is Required";
            return mobileResponseDto;
            }
           
    }
}