using AhlanFeekum.Permissions;
using AhlanFeekum.PropertyEvaluations;
using AhlanFeekum.Shared;
using AhlanFeekum.Shared;
using AhlanFeekum.SiteProperties;
using AhlanFeekum.UserProfiles;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Caching.Distributed;
using MiniExcelLibs;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Volo.Abp.Content;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Users;

namespace AhlanFeekum.PropertyEvaluations
{
    public class PropertyEvaluationsAppService : PropertyEvaluationsAppServiceBase, IPropertyEvaluationsAppService
    {
        //<suite-custom-code-autogenerated>
        public ICurrentUser _currentUser { get; set; }
        public PropertyEvaluationsAppService(IPropertyEvaluationRepository propertyEvaluationRepository, PropertyEvaluationManager propertyEvaluationManager, IDistributedCache<PropertyEvaluationDownloadTokenCacheItem, string> downloadTokenCache, IRepository<AhlanFeekum.UserProfiles.UserProfile, Guid> userProfileRepository, IRepository<AhlanFeekum.SiteProperties.SiteProperty, Guid> sitePropertyRepository, ICurrentUser currentUser)
            : base(propertyEvaluationRepository, propertyEvaluationManager, downloadTokenCache, userProfileRepository, sitePropertyRepository)
        {
            _currentUser = currentUser;
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        [Authorize(AhlanFeekumPermissions.PropertyEvaluations.Create)]
        public virtual async Task<PropertyEvaluationMobileDto> CreateMobileAsync(PropertyEvaluationCreateMobileDto input)
        {
            Guid? userId = null;
            if (_currentUser == null)
                throw new UserFriendlyException(L["NotLoggedIn"]);
            else
                userId = _currentUser.Id;

            if (input.SitePropertyId == default)
            {
                throw new UserFriendlyException(L["The {0} field is required.", L["SiteProperty"]]);
            }

            GetPropertyEvaluationsInput getPropertyEvaluationsInput = new GetPropertyEvaluationsInput()
            {
                SkipCount = 0,
                MaxResultCount = 1,
                SitePropertyId = input.SitePropertyId,
                UserProfileId = userId
            };
            var prop = await GetListAsync(getPropertyEvaluationsInput);
            if (prop != null && prop.Items.Count > 0)
            {
                var firstPro = prop.Items[0];
                var propertyEvaluation = await _propertyEvaluationManager.UpdateAsync(firstPro.PropertyEvaluation.Id,
                userId.Value, input.SitePropertyId, input.Cleanliness, input.PriceAndValue, input.Location, input.Accuracy, input.Attitude, input.RatingComment
                );

                return ObjectMapper.Map<PropertyEvaluationWithNavigationProperties, PropertyEvaluationMobileDto>(await _propertyEvaluationRepository.GetWithNavigationPropertiesAsync(propertyEvaluation.Id));
            }
            else
            {
                var propertyEvaluation = await _propertyEvaluationManager.CreateAsync(
                userId.Value, input.SitePropertyId, input.Cleanliness, input.PriceAndValue, input.Location, input.Accuracy, input.Attitude, input.RatingComment
                );

                return ObjectMapper.Map<PropertyEvaluationWithNavigationProperties, PropertyEvaluationMobileDto>(await _propertyEvaluationRepository.GetWithNavigationPropertiesAsync(propertyEvaluation.Id));
            }
        }
    }
}