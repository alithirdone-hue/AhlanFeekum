using AhlanFeekum.PropertyFeatures;
using AhlanFeekum.PropertyFeatures;
using JetBrains.Annotations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Data;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Domain.Services;

namespace AhlanFeekum.SiteProperties
{
    public class SitePropertyManager : SitePropertyManagerBase
    {
        //<suite-custom-code-autogenerated>
        public SitePropertyManager(ISitePropertyRepository sitePropertyRepository,
        IRepository<PropertyFeature, Guid> propertyFeatureRepository)
            : base(sitePropertyRepository, propertyFeatureRepository)
        {
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        public virtual async Task<SiteProperty> UpdateAsync(
           Guid id,  string? address = null, string? streetAndBuildingNumber = null, string? landMark = null, [CanBeNull] string? concurrencyStamp = null
       )
        {

            var queryable = await _sitePropertyRepository.WithDetailsAsync(x => x.PropertyFeatures);
            var query = queryable.Where(x => x.Id == id);

            var siteProperty = await AsyncExecuter.FirstOrDefaultAsync(query);

          
            siteProperty.Address = address;
            siteProperty.StreetAndBuildingNumber = streetAndBuildingNumber;
            siteProperty.LandMark = landMark;

            return await _sitePropertyRepository.UpdateAsync(siteProperty);
        }
    }
}